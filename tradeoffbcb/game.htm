<!DOCTYPE html>
<html lang='en'>

<head>
<meta http-equiv="Content-Type" content="text/html; charset=utf-8"/>

<title>Belize Game Score Calculator</title>

<script src="https://ajax.googleapis.com/ajax/libs/jquery/3.6.0/jquery.min.js"></script>
<script src="./gameboard_data/gameboard_data.js"></script>
<script language="javascript" type="text/javascript">

// dev_type MUST be BOTH the name prefix AND the table ID containing the row/col coord pairs of the development type.
// The objective of this function is to return a list of valid row/col coordinate pairs, even if some cells are empty.
function parse_development_type(dev_type){
    var coord_pairs = [];

    // rows include the header row, which is a tr in this case
    var rows_in_table = $(`table#${dev_type} tr`).length;
    for (var i = 1; i < rows_in_table; i++){
        row_elem = $(`input[name=${dev_type}Row${i}]`);
        col_elem = $(`input[name=${dev_type}Col${i}]`);

        row_coord = parseInt(row_elem.val());
        col_coord = parseInt(col_elem.val());

        if (!isNaN(row_coord) && !isNaN(col_coord)){
            coord_pairs.push([row_coord, col_coord]);
        }

        // only colorize the background if we're colorizing everything
        if ($('input[name=color]').prop('checked') === true){
            row_elem.css('background-color', '#00FF00');
            col_elem.css('background-color', '#00FF00');
        }
    }
    return coord_pairs;
}

function findneighbors(row, col, rowDim, colDim){
    // Neighbors are assumed to have the following order:
    //
    // 3 2 1
    // 4 x 0
    // 5 6 7
    var neighbor_offsets_row = [0, -1, -1, -1, 0, 1, 1, 1];
    var neighbor_offsets_col = [1, 1, 0, -1, -1, -1, 0, 1];


    var neighbors = [];
    for (var neighbor=0; neighbor<8; neighbor++){
        var neighbor_row = row + neighbor_offsets_row[neighbor];
        var neighbor_col = col + neighbor_offsets_col[neighbor];

        // Only push the neighbor coordinate pair if it's within bounds.
        if ((neighbor_row >= 0 && neighbor_row < rowDim) &&
            (neighbor_col >= 0 && neighbor_col < colDim)){
            neighbors.push([neighbor_row, neighbor_col]);
        }
    }
    return neighbors;
}

function make_coord_mask_from_red_zones(development_sites, row_dims, col_dims, pa){

    // It turns out that I can't just give a JS set an array, because I can add
    // two arrays with the same values and the set will happily contain both.
    // It must be tracking this by reference or something.  Integers,
    // however, remain unique within the set, so we can convert the
    // indices to a flat, integer index for this set computation and then
    // convert it back later.
    //
    // Need to use the largest dimension as the multiplication factor to avoid
    // overflowing the column index.
    var max_dim = Math.max(row_dims, col_dims);
    function _flat_index(coord_pair){
        return coord_pair[0] * max_dim + coord_pair[1];
    }

    var red_zone_mask = new Set();
    for (var index = 0; index < development_sites.length; index++){
        var coord_pair = development_sites[index];
        red_zone_mask.add(_flat_index(coord_pair));
        var dev_row = coord_pair[0];
        var dev_col = coord_pair[1];

        var neighbors = findneighbors(dev_row, dev_col, row_dims, col_dims);
        for (var neighbor_index = 0; neighbor_index < neighbors.length; neighbor_index++){
            red_zone_mask.add(_flat_index(neighbors[neighbor_index]));
        }
    }

    // Protected areas are not allowed within the redzones, so if any were
    // added to the red_zone_mask, we remove them.
    for (var index = 0; index < pa.length; index++){
        var protected_area = _flat_index(pa[index]);
        if (red_zone_mask.has(protected_area)){
            red_zone_mask.delete(protected_area);
        }
    }

    // Need to re-translate the flat indices back to row/col coordinate pairs.
    var output_array = []
    for (var iterator = red_zone_mask.values(), value=null; value=iterator.next().value; ) {
        var row = Math.floor(value / max_dim);
        var col = value % max_dim;
        output_array.push([row, col]);
    }
    return output_array;
}

function parse_sparse_gameboard_data(){
    var dest_array = [];
    // Build up a dense matrix of the gameboard data
    //
    // The indices are in the order:
    //    dest_array[row][column][attribute]
    //
    // Which is equivalent to saying:
    //    dest_array[y][x][attribute]

    // There are 39 rows in the gameboard.
    for (var row = 0; row < 38; row ++){
        var row_data = [];

        // there are 38 columns in the gameboard
        for (var column = 0; column < 39; column++){
            var sdu_values = [];

            // There are 6 attributes that need to be tracked for each cell.
            for(var value_index = 0; value_index < 6; value_index++){
                sdu_values.push(0);
            }
            row_data.push(sdu_values);
        }
        dest_array.push(row_data);
    }

    for (var csv_row_index = 0; csv_row_index < gameboard_data.length; csv_row_index++){
        var csv_row = gameboard_data[csv_row_index];
        var row_index = parseInt(csv_row.row_index);
        var col_index = parseInt(csv_row.column_index);
        dest_array[row_index][col_index][0] = parseInt(csv_row.tourism_quality);
        dest_array[row_index][col_index][1] = parseInt(csv_row.fishing_quality);
        dest_array[row_index][col_index][2] = parseFloat(csv_row.coral_km2);
        dest_array[row_index][col_index][3] = parseFloat(csv_row.mangroves_km2);
        dest_array[row_index][col_index][4] = parseFloat(csv_row.seagrass_km2);
        dest_array[row_index][col_index][5] = parseInt(csv_row.cv_score);
    }
    return dest_array;
}

function new_get_inputs(){
    var hotels = parse_development_type('hotel');
    var camps = parse_development_type('camp');
    var pa = parse_development_type('protected');
    new_score(hotels, camps, pa);
}

function new_score(hotels, camps, pa){
    // Uncomment this block to re-enable using the user-defined point weights.
    // var scores = {
    //     tourism: document.calculator.tourism_multiplier.value,
    //     fishing: document.calculator.fishing_multiplier.value,
    //     coral_per_km2: document.calculator.coral_multiplier.value,
    //     mangroves_per_km2: document.calculator.mangroves_multiplier.value,
    //     seagrass_per_km2: document.calculator.seagrass_multiplier.value,
    //     vulnerability: document.calculator.vulnerability_multiplier.value,
    // }

    // These point weights were defined by Jade and Jess when playing the game
    // in 2022, when we revisited and redefined the rules of the game.
    var scores = {
        tourism: 25,
        fishing: 25,
        coral_per_km2: 1,
        mangroves_per_km2: 3,
        seagrass_per_km2: 1,
        vulnerability: 50,
    }

    var data = parse_sparse_gameboard_data();

    var row_dims = data.length;
    var col_dims = data[0].length;

    // Totals for individual types of scores
    var total_tourism_score = 0;
    var total_fishing_score = 0;
    var total_coral_score = 0;
    var total_mangroves_score = 0;
    var total_seagrass_score = 0;

    var total_hotel_score = 0;
    var hotel_mask_set = make_coord_mask_from_red_zones(hotels, row_dims, col_dims, pa);
    for (var coords of hotel_mask_set){
        var row = coords[0];
        var col = coords[1];

        var tourism_rank = data[row][col][0];
        var coral_area_km2 = data[row][col][2];
        var mangroves_area_km2 = data[row][col][3];
        var seagrass_area_km2 = data[row][col][4];

        total_hotel_score += tourism_rank * scores.tourism -
            (coral_area_km2 * scores.coral_per_km2 +
             mangroves_area_km2 * scores.mangroves_per_km2 +
             seagrass_area_km2 * scores.seagrass_per_km2);

        total_tourism_score += tourism_rank * scores.tourism;
        total_coral_score += coral_area_km2 * scores.coral_per_km2;
        total_mangroves_score += mangroves_area_km2 * scores.mangroves_per_km2;
        total_seagrass_score += seagrass_area_km2 * scores.seagrass_per_km2;
    }

    // Make mask with fish camps, tally scores.
    var total_fish_camp_score = 0;
    var fish_camp_mask_set = make_coord_mask_from_red_zones(camps, row_dims, col_dims, pa);
    for (var coords of fish_camp_mask_set){
        var row = coords[0];
        var col = coords[1];

        var fishing_rank = data[row][col][1];
        var coral_area_km2 = data[row][col][2];
        var mangroves_area_km2 = data[row][col][3];
        var seagrass_area_km2 = data[row][col][4];

        // Tally up the scores for the fish camps
        total_fish_camp_score += fishing_rank * scores.fishing -
            (coral_area_km2 * scores.coral_per_km2 +
             mangroves_area_km2 * scores.mangroves_per_km2 +
             seagrass_area_km2 * scores.seagrass_per_km2);

        total_fishing_score += fishing_rank * scores.fishing;
        total_coral_score += coral_area_km2 * scores.coral_per_km2;
        total_mangroves_score += mangroves_area_km2 * scores.mangroves_per_km2;
        total_seagrass_score += seagrass_area_km2 * scores.seagrass_per_km2;
    }

    // Use development sites and figure out impacts to CV
    var cv_score = 0;
    var development_sites = hotels.concat(camps);
    for (var coords of development_sites){
        var row = coords[0];
        var col = coords[1];

        // CV Rank will be 0 where we aren't on a shoreline SDU, so we can
        // just skip those SDUs.
        var cv_rank = data[row][col][5];
        if (cv_rank > 0){
            cv_score += cv_rank * scores.vulnerability;
        }
    }

    console.log('---------');
    console.log('TABULATED SCORES BY NATURAL CAPITAL');
    console.log('Points gained from tourism ' + Math.round(total_tourism_score));
    console.log('Points gained from fishing ' + Math.round(total_fishing_score));
    document.calculator.tour.value = Math.round(total_tourism_score);
    document.calculator.fish.value = Math.round(total_fishing_score);
    var gains = Math.round(total_tourism_score + total_fishing_score);
    document.calculator.gain.value = gains;

    console.log('Points lost from impacts to coral ' + Math.round(total_coral_score));
    console.log('Points lost from impacts to mangroves ' + Math.round(total_mangroves_score));
    console.log('Points lost from impacts to seagrass ' + Math.round(total_seagrass_score));
    document.calculator.coral.value = Math.round(total_coral_score);
    document.calculator.groves.value = Math.round(total_mangroves_score);
    document.calculator.grass.value = Math.round(total_seagrass_score);
    var losses = Math.round(total_coral_score + total_mangroves_score + total_seagrass_score);
    document.calculator.loss.value = losses;

    console.log('Points lost from impacts to coastal vulnerability ' + cv_score);
    document.calculator.cv.value = cv_score;

    var net_score = gains - losses - cv_score;
    console.log('Net Score ' + net_score);
    document.calculator.score.value = net_score;

    console.log('---------');
    console.log('TABULATED SCORES BY DEVELOPMENT TYPE');
    console.log('Hotel Score ' + Math.round(total_hotel_score));
    console.log('Fish Score ' + Math.round(total_fish_camp_score));
    console.log('CV impacts ' + cv_score);

}


function example(){

clean();

console.log('Loading example coordinates.');
document.calculator.hotelRow1.value=12;
document.calculator.hotelCol1.value=14;
document.calculator.hotelRow2.value=21;
document.calculator.hotelCol2.value=10;
document.calculator.hotelRow3.value=28;
document.calculator.hotelCol3.value=2;

document.calculator.campRow1.value=17;
document.calculator.campCol1.value=14;
document.calculator.campRow2.value=17;
document.calculator.campCol2.value=15;
document.calculator.campRow3.value=14;
document.calculator.campCol3.value=17;
document.calculator.campRow4.value=23;
document.calculator.campCol4.value=7;
document.calculator.campRow5.value=10;
document.calculator.campCol5.value=15;

document.calculator.protectedRow1.value=22;
document.calculator.protectedCol1.value=10;
document.calculator.protectedRow2.value=10;
document.calculator.protectedCol2.value=15;
document.calculator.protectedRow3.value="";
document.calculator.protectedCol3.value="";
document.calculator.protectedRow4.value="";
document.calculator.protectedCol4.value="";
document.calculator.protectedRow5.value="";
document.calculator.protectedCol5.value="";

document.calculator.fish.value="";
document.calculator.tour.value="";
document.calculator.gain.value="";
document.calculator.coral.value="";
document.calculator.groves.value="";
document.calculator.grass.value="";
document.calculator.loss.value="";
document.calculator.score.value="";
}

</script>

<script language="javascript" type="text/javascript">
function white(){
    // We only want to set the background color on the top part of the table,
    // the one that the user provides the coordinate pairs.
    $('table#user-input input').each(function(){
        $(this).css('background-color', '#FFFFFF');
    });
}

function clean(){
    white();

    // Clear the text value for all text-based inputs in the DOM.
    //
    // If the element has a default value defined, reset to the default value.
    $('input[type=text]').each(function(){
        var default_value = $(this).prop('defaultValue');
        if (default_value !== undefined){
            $(this).val(default_value);
        } else {
            $(this).val("");
        }
    });
}

function runtests(){
    console.log('Running tests');

    console.log('Testing clean function');
    $('input:text').each(function(){
        $(this).val("1");  // set a value; doesn't matter what
    });
    clean();
    $('input:text').each(function(){
        if ($(this).val() != "" && $(this).prop('defaultValue') === undefined) {
            console.log($(this).attr('name') + ' should be blank but is not.');
        } else if ($(this).prop('defaultValue') !== $(this).val()){
            console.log($(this).attr('name') + ' should match its default value but it does not.');
        }
    });

    console.log('Testing white() function');
    document.calculator.campCol3.style.background = "#000000";  // Should be set to white
    document.calculator.grass.style.background = "#000000";  // Should stay black
    white();
    if ($('input[name=campCol3]').css('background-color') != 'rgb(255, 255, 255)'){
        console.log('CampCol3 background not reset correctly');
    }
    if ($('input[name=grass]').css('background-color') != 'rgb(0, 0, 0)'){
        console.log(document.calculator.grass.style.background);
        console.log("Grass background color changed when it shouldn't have");
    }
    // reset the colors to base state.
    document.calculator.campCol3.style.background = "#FFFFFF";
    document.calculator.grass.style.background = "#FFFFFF";

    console.log('Testing coordinate pair extraction');
    clean();
    var test_data = {
        'hotelRow1': 1,
        'hotelCol1': '',  // deliberately blank; both Row1, Col1 should be skipped
        //deliberately excluding hotelRow2, Col2.
        'hotelRow3': 4,
        'hotelCol3': 5,
        'campRow4': 6,
        'campCol4': 7,
        'protectedRow4': 4,
        'protectedCol4': 5,
    }
    for (const [key, value] of Object.entries(test_data)){
        $(`input[name=${key}]`).val(value);
    }
    var hotels = parse_development_type('hotel')
    var expected_hotels = [[4,5]]
    if (JSON.stringify(hotels) != JSON.stringify(expected_hotels)){
        console.log('Hotel output does not match');
    }

    var camps = parse_development_type('camp')
    var expected_camps = [[6,7]]
    if (JSON.stringify(camps) != JSON.stringify(expected_camps)){
        console.log('Camps output does not match');
    }

    var protected_areas = parse_development_type('protected')
    var expected_pa = [[4,5]]
    if (JSON.stringify(protected_areas) != JSON.stringify(expected_pa)){
        console.log('PA output does not match');
    }

    console.log('Testing neighbors');
    clean();

    // Let's assume that we're on a 10 x 10 grid.
    // Coordinate pair order is (x, y)
    // NOTE that for this program, the order of the neighbors doesn't matter, just that the coordinate pairs match.
    var coords_and_expected_neighbors = [
        [[0, 0], [[0, 1], [1, 1], [1, 0]]],
        [[0, 9], [[0, 8], [1, 8], [1, 9]]],
        [[0, 4], [[0, 3], [1, 3], [1, 4], [1, 5], [0, 5]]],
        [[9, 0], [[8, 0], [8, 1], [9, 1]]],
        [[9, 9], [[8, 9], [8, 8], [9, 8]]],
        [[9, 4], [[9, 3], [8, 3], [8, 4], [8, 5], [9, 5]]],
        [[4, 0], [[3, 0], [3, 1], [4, 1], [5, 1], [5, 0]]],
        [[4, 9], [[3, 9], [3, 8], [4, 8], [5, 8], [5, 9]]],
        [[4, 4], [[3, 4], [3, 5], [4, 5], [5, 5], [5, 4], [5, 3], [4, 3], [3, 3]]],
    ]
    for (var i=0; i < coords_and_expected_neighbors.length; i++){
        var coords = coords_and_expected_neighbors[i][0];
        var expected_neighbors = coords_and_expected_neighbors[i][1].sort();
        var neighbors = findneighbors(coords[0], coords[1], 10, 10).sort();
        if (JSON.stringify(neighbors) != JSON.stringify(expected_neighbors)){
            console.log(neighbors);
            console.log(expected_neighbors);
            console.log(`Neighbors of ${coords} incorrect`);
        }
    }

    console.log('Testing Sample Scenario');
    clean();
    // Feels nicer to do this in a loop rather than specifically call each input, even if it is longer.
    //
    // development type, row, column.
    var inputs = [
        ['hotel', 16, 13],
        ['hotel', 19, 12],
        ['camp', 23, 7],
        ['camp', 11, 18],
        ['camp', 17, 19],
        ['protected', 17, 13],
    ];
    var n_developments = {
        hotel: 1,
        camp: 1

    }
    for (var input_index = 0; input_index < inputs.length; input_index++){
        var development_type = inputs[input_index][0];
        var row = inputs[input_index][1];
        var col = inputs[input_index][2];

        if (n_developments[development_type] === undefined){
            n_developments[development_type] = 1;
        }
        var dev_index = n_developments[development_type];

        $(`input[name=${development_type}Row${dev_index}]`).val(row);
        $(`input[name=${development_type}Col${dev_index}]`).val(col);

        n_developments[development_type] += 1;
    }
    new_get_inputs();

    values_and_expected_values = [
        [document.calculator.fish.value, 1100],
        [document.calculator.tour.value, 1050],
        [document.calculator.gain.value, 2150],
        [document.calculator.coral.value, 99],
        [document.calculator.groves.value, 382],
        [document.calculator.grass.value, 812],
        [document.calculator.loss.value, 1292],
        [document.calculator.score.value, 608],
    ]
    for (var i = 0; i < values_and_expected_values.length; i++){
        var form_value = values_and_expected_values[i][0];
        var expected_value = values_and_expected_values[i][1];

        if (form_value != expected_value){
            console.log('Form value ' + form_value + ' != expected value ' + expected_value);
        }
    }




    clean();
    console.log('Tests complete.')
}
</script>

</head>

<body onload="runtests();">

<!-- Opening a HTML Form. -->
<form name="calculator">
<table>
<tr><td>
    <table id='user-input'>
    <tr><td><center>Hotels</center></td><td><center>Fish Camps</center></td><td><center>Protected Areas</center></td></tr>

    <tr><td valign=top>
        <table id="hotel">
        <tr><td>#</td><td><center>Row</center></td><td><center>Column</center></td></tr>
        <tr><td>1</td><td><input type="text" name="hotelRow1" value="" size=2></td><td><input type="text" name="hotelCol1" value="" size=2></td></tr>
        <tr><td>2</td><td><input type="text" name="hotelRow2" size=2></td><td><input type="text" name="hotelCol2" size=2></td></tr>
        <tr><td>3</td><td><input type="text" name="hotelRow3" size=2></td><td><input type="text" name="hotelCol3" size=2></td></tr>
        </table>
    </td>

    <td>
        <table id="camp">
        <tr><td>#</td><td><center>Row</center></td><td><center>Column</center></td></tr>
        <tr><td>1</td><td><input type="text" name="campRow1" size=2></td><td><input type="text" name="campCol1" size=2></td></tr>
        <tr><td>2</td><td><input type="text" name="campRow2" size=2></td><td><input type="text" name="campCol2" size=2></td></tr>
        <tr><td>3</td><td><input type="text" name="campRow3" size=2></td><td><input type="text" name="campCol3" size=2></td></tr>
        <tr><td>4</td><td><input type="text" name="campRow4" size=2></td><td><input type="text" name="campCol4" size=2></td></tr>
        <tr><td>5</td><td><input type="text" name="campRow5" size=2></td><td><input type="text" name="campCol5" size=2></td></tr>
        </table>
    </td>

    <td>
        <table id="protected">
        <tr><td>#</td><td><center>Row</center></td><td><center>Column</center></td></tr>
        <tr><td>1</td><td><input type="text" name="protectedRow1" size=2></td><td><input type="text" name="protectedCol1" size=2></td></tr>
        <tr><td>2</td><td><input type="text" name="protectedRow2" size=2></td><td><input type="text" name="protectedCol2" size=2></td></tr>
        <tr><td>3</td><td><input type="text" name="protectedRow3" size=2></td><td><input type="text" name="protectedCol3" size=2></td></tr>
        <tr><td>4</td><td><input type="text" name="protectedRow4" size=2></td><td><input type="text" name="protectedCol4" size=2></td></tr>
        <tr><td>5</td><td><input type="text" name="protectedRow5" size=2></td><td><input type="text" name="protectedCol5" size=2></td></tr>
        </table>
    </td></tr>
    </table>
</td></tr>

<!--  Uncomment this table if you need to customize the score weights.
<tr>
    <td>
        <table>
            <tr>
                <td>Tourism multiplier</td><td><input type="text" name="tourism_multiplier" size=4 value=25></td>
            </tr>
            <tr>
                <td>Fishing multiplier</td><td><input type="text" name="fishing_multiplier" size=4 value=25></td>
            </tr>
            <tr>
                <td>Coral multiplier (per km^2)</td><td><input type="text" name="coral_multiplier" size=4 value=1></td>
            </tr>
            <tr>
                <td>Mangroves multiplier (per km^2)</td><td><input type="text" name="mangroves_multiplier" size=4 value=3></td>
            </tr>
            <tr>
                <td>Seagrass multiplier (per km^2)</td><td><input type="text" name="seagrass_multiplier" size=4 value=1></td>
            </tr>
            <tr>
                <td>Vulnerability multiplier</td><td><input type="text" name="vulnerability_multiplier" size=4 value=50></td>
            </tr>
        </table>
    </td>
</tr>
-->

<tr>
<td>
    <table>
        <tr><td></td><td></td><td><font color="#00FF00">Fish</font></td><td></td><td><font color="#00FF00">Tourism</font></td><td></td><td></td></tr>
        <tr><td></td><td></td><td><input disabled type="text" name="fish" size=4></td>
        <td>+</td>
        <td><input disabled type="text" name="tour" size=4></td>
        <td>=</td>
        <td><input disabled type="text" name="gain" size=4></td></tr>

        <tr><td><font color="#FF0000">Coral</font></td><td></td><td><font color="#FF0000">Mangroves</font></td><td></td><td><font color="#FF0000">Seagrass</font></td><td></td><td></td></tr>
        <tr><td><input disabled type="text" name="coral" size=4></td>
        <td>+</td>
        <td><input disabled type="text" name="groves" size=4></td>
        <td>+</td>
        <td><input disabled type="text" name="grass" size=4></td>
        <td>=</td>
        <td><input disabled type="text" name="loss" size=4></td></tr>

         <tr><td></td><td></td><td></td><td></td><td align=right><font color="#FF0000">CV</font></td><td></td><td><input disabled type="text" name="cv" size=4></td></tr>

        <tr><td></td><td></td><td></td><td></td><td align=right><b>Net Score</b></td><td></td><td><input disabled type="text" name="score" size=4></td></tr>

    </table>
</td></tr>
</table>

<br/>
<input type="hidden" name="color" value="true">
<input type="button" value="Clear" onclick="javascript:clean();">
<input type="button" value="Example" onclick="javascript:example();">
<input type="button" value="Calculate" onclick="javascript:new_get_inputs();">
</form>

<div id="test-errors"></div>

</body>

</html>
