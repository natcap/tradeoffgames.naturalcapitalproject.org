<!DOCTYPE html>
<html lang='en'>

<head>
<meta http-equiv="Content-Type" content="text/html; charset=utf-8"/>

<title>Belize Game Score Calculator</title>

<script src="https://ajax.googleapis.com/ajax/libs/jquery/3.6.0/jquery.min.js"></script>
<script src="./gameboard_data/gameboard_data.js"></script>
<script language="javascript" type="text/javascript">

// dev_type MUST be BOTH the name prefix AND the table ID containing the row/col coord pairs of the development type.
// The objective of this function is to return a list of valid row/col coordinate pairs, even if some cells are empty.
function parse_development_type(dev_type){
    var coord_pairs = [];

    // rows include the header row, which is a tr in this case
    var rows_in_table = $(`table#${dev_type} tr`).length;
    for (var i = 1; i < rows_in_table; i++){
        row_elem = $(`input[name=${dev_type}Row${i}]`);
        col_elem = $(`input[name=${dev_type}Col${i}]`);

        row_coord = parseInt(row_elem.val());
        col_coord = parseInt(col_elem.val());

        if (!isNaN(row_coord) && !isNaN(col_coord)){
            coord_pairs.push([row_coord, col_coord]);
        }

        // only colorize the background if we're colorizing everything
        if ($('input[name=color]').prop('checked') === true){
            row_elem.css('background-color', '#00FF00');
            col_elem.css('background-color', '#00FF00');
        }
    }
    return coord_pairs;
}


function getinput(){
    white();
    var hotels = parse_development_type('hotel');
    var camps = parse_development_type('camp');
    var pa = parse_development_type('protected');
    score(hotels,camps,pa)
}


function findneighbors(x, y, xDim, yDim)
{
    // Neighbors are assumed to have the following order:
    //
    // 3 2 1
    // 4 x 0
    // 5 6 7
    var neighbor_offsets_x = [1, 1, 0, -1, -1, -1, 0, 1];
    var neighbor_offsets_y = [0, 1, 1, 1, 0, -1, -1, -1];

    var neighbors = [];
    for (var neighbor=0; neighbor<8; neighbor++){
        var neighbor_x = x + neighbor_offsets_x[neighbor];
        var neighbor_y = y + neighbor_offsets_y[neighbor];

        // Only push the neighbor coordinate pair if it's within bounds.
        if ((neighbor_x >= 0 && neighbor_x < xDim) &&
            (neighbor_y >= 0 && neighbor_y < yDim)){
            neighbors.push([neighbor_x, neighbor_y]);
        }
    }
    return neighbors;
}

function parse_sparse_gameboard_data(){
    var dest_array = [];
    // Build up a dense matrix of the gameboard data
    //
    // The indices are in the order:
    //    dest_array[row][column][attribute]
    //
    // Which is equivalent to saying:
    //    dest_array[y][x][attribute]

    // There are 39 rows in the gameboard.
    for (var row = 0; row < 38; row ++){
        var row_data = [];

        // there are 38 columns in the gameboard
        for (var column = 0; column < 39; column++){
            var sdu_values = [];

            // There are 6 attributes that need to be tracked for each cell.
            for(var value_index = 0; value_index < 6; value_index++){
                sdu_values.push(0);
            }
            row_data.push(sdu_values);
        }
        dest_array.push(row_data);
    }

    for (var csv_row_index = 0; csv_row_index < gameboard_data.length; csv_row_index++){
        var csv_row = gameboard_data[csv_row_index];
        var row_index = parseInt(csv_row.row_index);
        var col_index = parseInt(csv_row.column_index);
        dest_array[row_index][col_index][0] = parseInt(csv_row.tourism_quality);
        dest_array[row_index][col_index][1] = parseInt(csv_row.fishing_quality);
        dest_array[row_index][col_index][2] = parseFloat(csv_row.coral_km2);
        dest_array[row_index][col_index][3] = parseFloat(csv_row.mangroves_km2);
        dest_array[row_index][col_index][4] = parseFloat(csv_row.seagrass_km2);
        dest_array[row_index][col_index][5] = parseInt(csv_row.cv_score);
    }
    return dest_array;
}


function score(hotels, camps, pa)
{

var scores = {
    tourism: 25,
    fishing: 25,
    coral_per_km2: 1,
    mangroves_per_km2: 3,
    seagrass_per_km2: 1,
    vulnerability: 50,
}

var data = parse_sparse_gameboard_data();

var visited = [];
var fished = [];

// Protected areas must be excluded from hotel and fisheries scores.
for (var n = 0; n < pa.length; n++){
    visited.push([pa[n][0],pa[n][1]]);
    fished.push([pa[n][0],pa[n][1]]);
}
    var rowDim = 38;
    var colDim = 39;

    var row = -1;
    var col = -1;

    var tourTotal = 0;
    var fishTotal = 0;
    var coralTotal = 0;
    var grovesTotal = 0;
    var grassTotal = 0;

    var tourLocal = 0;
    var fishLocal = 0;
    var coralLocal = 0;
    var grovesLocal = 0;
    var grassLocal = 0;

    var tour = 0;
    var fish = 0;
    var coral = 0;
    var groves = 0;
    var grass = 0;

    var visit = false;
    var fishing = false;

    var neighbors = [];

    // For each user-defined hotel:
    //
    // Identify the set of distinct coordinate pairs affected by the set of hotels that are not MPAs
    // For each coordinate pair affected by hotels, total up the scores for:
    //    --> Tourism, coral, mangroves, seagrass
    for (i=0; i<hotels.length; i++){
        row = hotels[i][0];
        col = hotels[i][1];


        tour = data[row][col][0];
        fish = 0;
        coral = data[row][col][2];
        groves = data[row][col][3];
        grass = data[row][col][4];

        visit = true;
        for (v=0; v<visited.length; v++){
             if ((row == visited[v][0]) && (col == visited[v][1])){
                  visit = false;
                  break;
             }
        }

        // Don't double-count the points from another hotel.
        if (visit){
             tourTotal = tourTotal + tour;
             fish = fishTotal + fish;
             coralTotal = coralTotal + coral;
             grovesTotal = grovesTotal + groves;
             grassTotal = grassTotal + grass;

             visited.push(hotels[i]);
        }


        neighbors = findneighbors(row, col, rowDim, colDim);
        for (j=0; j<neighbors.length; j++){
            visit = true;
            for (v=0; v<visited.length; v++){
                 if ((neighbors[j][0] == visited[v][0]) && (neighbors[j][1] == visited[v][1])){
                      visit = false;
                      break;
                 }
            }

            if (visit){
                 tourTotal = tourTotal + data[neighbors[j][0]][neighbors[j][1]][0];
                 coralTotal = coralTotal + data[neighbors[j][0]][neighbors[j][1]][2];
                 grovesTotal = grovesTotal + data[neighbors[j][0]][neighbors[j][1]][3];
                 grassTotal = grassTotal + data[neighbors[j][0]][neighbors[j][1]][4];
                 visited.push(neighbors[j]);
            }

            tour = tour + data[neighbors[j][0]][neighbors[j][1]][0];
            coral = coral + data[neighbors[j][0]][neighbors[j][1]][2];
            groves = groves + data[neighbors[j][0]][neighbors[j][1]][3];
            grass = grass + data[neighbors[j][0]][neighbors[j][1]][4];
        }
    }

    for (i=0; i<camps.length; i++){
        visit = true;
        for (v=0; v<visited.length; v++){
             if ((camps[i][0] == visited[v][0]) && (camps[i][1] == visited[v][1])){
                  visit = false;
                  break;
             }
        }

        if (visit){
             fishTotal = fishTotal + data[camps[i][0]][camps[i][1]][1];
             coralTotal = coralTotal + data[camps[i][0]][camps[i][1]][2];
             grovesTotal = grovesTotal + data[camps[i][0]][camps[i][1]][3];
             grassTotal = grassTotal + data[camps[i][0]][camps[i][1]][4];
             visited.push(camps[i]);
        }
        else {
            fishing = true;
            for (f=0; f<fished.length; f++) {
                 if ((camps[i][0] == fished[f][0]) && (camps[i][1] == fished[f][1])){
                      fishing = false;
                      break;
                 }
            }

            if (fishing){
                 fishTotal = fishTotal + data[camps[i][0]][camps[i][1]][1];
                 fished.push(camps[i]);
            }
        }

        //tour = data[camps[i][0]][camps[i][1]][0];
        tour = 0;
        fish = data[camps[i][0]][camps[i][1]][1];
        coral = data[camps[i][0]][camps[i][1]][2];
        groves = data[camps[i][0]][camps[i][1]][3];
        grass = data[camps[i][0]][camps[i][1]][4];

        neighbors = findneighbors(camps[i][0],camps[i][1], rowDim, colDim);
        for (j=0; j<neighbors.length; j++){
            visit = true;
            for (v=0; v<visited.length; v++){
                 if ((neighbors[j][0] == visited[v][0]) && (neighbors[j][1] == visited[v][1])){
                      visit = false;
                      //break;
                 }
            }

            if (visit){
                 fishTotal = fishTotal + data[neighbors[j][0]][neighbors[j][1]][1];
                 coralTotal = coralTotal + data[neighbors[j][0]][neighbors[j][1]][2];
                 grovesTotal = grovesTotal + data[neighbors[j][0]][neighbors[j][1]][3];
                 grassTotal = grassTotal + data[neighbors[j][0]][neighbors[j][1]][4];
                 visited.push(neighbors[j]);
            }
            else{
                fishing = true;
                for (f=0; f<fished.length; f++){
                     if ((neighbors[j][0] == fished[f][0]) && (neighbors[j][1] == fished[f][1])){
                          fishing = false;
                          //break;
                     }
                }

                if (fishing){
                     fishTotal = fishTotal + data[neighbors[j][0]][neighbors[j][1]][1];
                     fished.push(neighbors[j]);
                }
            }
            tour = 0;
            fish = fish + data[neighbors[j][0]][neighbors[j][1]][1];
            coral = coral + data[neighbors[j][0]][neighbors[j][1]][2];
            groves = groves + data[neighbors[j][0]][neighbors[j][1]][3];
            grass = grass + data[neighbors[j][0]][neighbors[j][1]][4];
        }
    }

    var coast = [[4,15],[5,15],[5,16],[6,16],[7,16],[8,15],[8,16],[9,15],[10,15],[11,15],[12,14],[13,14],[14,14],[15,13],[15,14],[16,13],[17,13],[18,12],[19,11],[19,12],[20,11],[21,10],[22,9],[22,10],[23,6],[23,7],[23,8],[23,9],[24,5],[25,5],[26,4],[26,5],[27,3],[28,2],[29,1],[30,1],[31,1]];
    var cv1 = 0;
    var cv2 = 0;
    var loss = 0;
    var impact = 0;
    var totalImpact = 0;

    var degraded = [];
    var degrade = false;
    for (n=0; n<hotels.length; n++){
        degraded.push.apply(degraded,findneighbors(hotels[n][0],hotels[n][1],xDim,yDim));
    }
    degraded.push.apply(degraded,hotels);
    for (n=0; n<camps.length; n++){
        degraded.push.apply(degraded,findneighbors(camps[n][0],camps[n][1],xDim,yDim));
    }
    degraded.push.apply(degraded,camps);

    for (n=0; (n<coast.length); n++){
        cv1 = 0;
        cv2 = 0;
        neighbors = findneighbors(coast[n][0],coast[n][1],xDim,yDim);
        neighbors.push(coast[n]);
        for (j=0; j<neighbors.length; j++){
            cv1 = cv1 + data[neighbors[j][0]][neighbors[j][1]][2] + data[neighbors[j][0]][neighbors[j][1]][3] + data[neighbors[j][0]][neighbors[j][1]][4];
        }

        for (j=0; j<neighbors.length; j++){
            degrade = false;
            for (d=0; !(degrade) && (d<degraded.length); d++){
                if ((degraded[d][0] == neighbors[j][0]) && (degraded[d][1] == neighbors[j][1])){
                    degrade = true;
                    for (p=0; p<pa.length; p++){
                        if ((degraded[d][0] == pa[p][0]) && (degraded[d][1] == pa[p][1])){
                            degrade = false;
                        }
                    }
                }
            }

            if (!degrade){
                cv2 = cv2 + data[neighbors[j][0]][neighbors[j][1]][2] + data[neighbors[j][0]][neighbors[j][1]][3] + data[neighbors[j][0]][neighbors[j][1]][4];
            }
        }

        loss = (cv1-cv2)/cv1;

        if (data[coast[n][0]][coast[n][1]][5]==3){
            impact = 0;
        }
        else if (data[coast[n][0]][coast[n][1]][5]==2){
            if (loss > .6){
                impact = 100;
            }
            else if (loss > .3){
                impact = 50;
            }
            else {
                impact = 0;
            }
        }
        else {
            if (loss > .6){
                impact = 150;
            }
            else if (loss > .3){
                impact = 100;
            }
            else {
                impact = 0;
            }
        }

        totalImpact = totalImpact + impact;
    }

document.calculator.cv.value=Math.round(totalImpact);
document.calculator.fish.value=Math.round(fishTotal);
document.calculator.tour.value=Math.round(tourTotal);
document.calculator.gain.value=Math.round(fishTotal)+Math.round(tourTotal);
document.calculator.coral.value=Math.round(coralTotal);
document.calculator.groves.value=Math.round(grovesTotal);
document.calculator.grass.value=Math.round(grassTotal);
document.calculator.loss.value=Math.round(coralTotal)+Math.round(grovesTotal)+Math.round(grassTotal);
document.calculator.score.value=(Math.round(tourTotal)+Math.round(fishTotal))-(Math.round(coralTotal)+Math.round(grovesTotal)+Math.round(grassTotal)+Math.round(totalImpact));
}

function example(){

clean();

document.calculator.hotelX1.value=12;
document.calculator.hotelY1.value=14;
document.calculator.hotelX2.value=21;
document.calculator.hotelY2.value=10;
document.calculator.hotelX3.value=28;
document.calculator.hotelY3.value=2;

document.calculator.campX1.value=12;
document.calculator.campY1.value=14;
document.calculator.campX2.value=21;
document.calculator.campY2.value=10;
document.calculator.campX3.value=28;
document.calculator.campY3.value=2;
document.calculator.campX4.value=13;
document.calculator.campY4.value=18;
document.calculator.campX5.value=10;
document.calculator.campY5.value=18;

document.calculator.protectedX1.value=10;
document.calculator.protectedY1.value=10;
document.calculator.protectedX2.value=12;
document.calculator.protectedY2.value=15;
document.calculator.protectedX3.value="";
document.calculator.protectedY3.value="";
document.calculator.protectedX4.value="";
document.calculator.protectedY4.value="";
document.calculator.protectedX5.value="";
document.calculator.protectedY5.value="";

document.calculator.fish.value="";
document.calculator.tour.value="";
document.calculator.gain.value="";
document.calculator.coral.value="";
document.calculator.groves.value="";
document.calculator.grass.value="";
document.calculator.loss.value="";
document.calculator.score.value="";
}

function white(){
    // We only want to set the background color on the top part of the table,
    // the one that the user provides the coordinate pairs.
    $('table#user-input input').each(function(){
        $(this).css('background-color', '#FFFFFF');
    });
}

function clean(){
    white();

    // Clear the text value for all text-based inputs in the DOM.
    $('input[type=text]').each(function(){
        $(this).val("");
    });
}

</script>

<script language="javascript" type="text/javascript">
function runtests(){
    console.log('Running tests');

    console.log('Testing clean function');
    $('input:text').each(function(){
        $(this).val("1");  // set a value; doesn't matter what
    });
    clean();
    $('input:text').each(function(){
        if ($(this).val() != "") {
            console.log($(this).attr('name') + ' should be blank but is not.');
        }
    });

    console.log('Testing white() function');
    document.calculator.campCol3.style.background = "#000000";  // Should be set to white
    document.calculator.grass.style.background = "#000000";  // Should stay black
    white();
    if ($('input[name=campCol3]').css('background-color') != 'rgb(255, 255, 255)'){
        console.log('CampCol3 background not reset correctly');
    }
    if ($('input[name=grass]').css('background-color') != 'rgb(0, 0, 0)'){
        console.log(document.calculator.grass.style.background);
        console.log("Grass background color changed when it shouldn't have");
    }
    // reset the colors to base state.
    document.calculator.campCol3.style.background = "#FFFFFF";
    document.calculator.grass.style.background = "#FFFFFF";

    console.log('Testing coordinate pair extraction');
    clean();
    var test_data = {
        'hotelRow1': 1,
        'hotelCol1': '',  // deliberately blank; both Row1, Col1 should be skipped
        //deliberately excluding hotelRow2, Col2.
        'hotelRow3': 4,
        'hotelCol3': 5,
        'campRow4': 6,
        'campCol4': 7,
        'protectedRow4': 4,
        'protectedCol4': 5,
    }
    for (const [key, value] of Object.entries(test_data)){
        $(`input[name=${key}]`).val(value);
    }
    var hotels = parse_development_type('hotel')
    var expected_hotels = [[4,5]]
    if (JSON.stringify(hotels) != JSON.stringify(expected_hotels)){
        console.log('Hotel output does not match');
    }

    var camps = parse_development_type('camp')
    var expected_camps = [[6,7]]
    if (JSON.stringify(camps) != JSON.stringify(expected_camps)){
        console.log('Camps output does not match');
    }

    var protected_areas = parse_development_type('protected')
    var expected_pa = [[4,5]]
    if (JSON.stringify(protected_areas) != JSON.stringify(expected_pa)){
        console.log('PA output does not match');
    }

    console.log('Testing neighbors');
    clean();

    // Let's assume that we're on a 10 x 10 grid.
    // Coordinate pair order is (x, y)
    // NOTE that for this program, the order of the neighbors doesn't matter, just that the coordinate pairs match.
    var coords_and_expected_neighbors = [
        [[0, 0], [[0, 1], [1, 1], [1, 0]]],
        [[0, 9], [[0, 8], [1, 8], [1, 9]]],
        [[0, 4], [[0, 3], [1, 3], [1, 4], [1, 5], [0, 5]]],
        [[9, 0], [[8, 0], [8, 1], [9, 1]]],
        [[9, 9], [[8, 9], [8, 8], [9, 8]]],
        [[9, 4], [[9, 3], [8, 3], [8, 4], [8, 5], [9, 5]]],
        [[4, 0], [[3, 0], [3, 1], [4, 1], [5, 1], [5, 0]]],
        [[4, 9], [[3, 9], [3, 8], [4, 8], [5, 8], [5, 9]]],
        [[4, 4], [[3, 4], [3, 5], [4, 5], [5, 5], [5, 4], [5, 3], [4, 3], [3, 3]]],
    ]
    for (var i=0; i < coords_and_expected_neighbors.length; i++){
        var coords = coords_and_expected_neighbors[i][0];
        var expected_neighbors = coords_and_expected_neighbors[i][1].sort();
        var neighbors = findneighbors(coords[0], coords[1], 10, 10).sort();
        if (JSON.stringify(neighbors) != JSON.stringify(expected_neighbors)){
            console.log(neighbors);
            console.log(expected_neighbors);
            console.log(`Neighbors of ${coords} incorrect`);
        }
    }


}
</script>

</head>

<body onload="runtests();">

<!-- Opening a HTML Form. -->
<form name="calculator">
<table>
<tr><td>
    <table id='user-input'>
    <tr><td><center>Hotels</center></td><td><center>Fish Camps</center></td><td><center>Protected Areas</center></td></tr>

    <tr><td valign=top>
        <table id="hotel">
        <tr><td>#</td><td><center>Row</center></td><td><center>Column</center></td></tr>
        <tr><td>1</td><td><input type="text" name="hotelRow1" value="" size=2></td><td><input type="text" name="hotelCol1" value="" size=2></td></tr>
        <tr><td>2</td><td><input type="text" name="hotelRow2" size=2></td><td><input type="text" name="hotelCol2" size=2></td></tr>
        <tr><td>3</td><td><input type="text" name="hotelRow3" size=2></td><td><input type="text" name="hotelCol3" size=2></td></tr>
        </table>
    </td>

    <td>
        <table id="camp">
        <tr><td>#</td><td><center>Row</center></td><td><center>Column</center></td></tr>
        <tr><td>1</td><td><input type="text" name="campRow1" size=2></td><td><input type="text" name="campCol1" size=2></td></tr>
        <tr><td>2</td><td><input type="text" name="campRow2" size=2></td><td><input type="text" name="campCol2" size=2></td></tr>
        <tr><td>3</td><td><input type="text" name="campRow3" size=2></td><td><input type="text" name="campCol3" size=2></td></tr>
        <tr><td>4</td><td><input type="text" name="campRow4" size=2></td><td><input type="text" name="campCol4" size=2></td></tr>
        <tr><td>5</td><td><input type="text" name="campRow5" size=2></td><td><input type="text" name="campCol5" size=2></td></tr>
        </table>
    </td>

    <td>
        <table id="protected">
        <tr><td>#</td><td><center>Row</center></td><td><center>Column</center></td></tr>
        <tr><td>1</td><td><input type="text" name="protectedRow1" size=2></td><td><input type="text" name="protectedCol1" size=2></td></tr>
        <tr><td>2</td><td><input type="text" name="protectedRow2" size=2></td><td><input type="text" name="protectedCol2" size=2></td></tr>
        <tr><td>3</td><td><input type="text" name="protectedRow3" size=2></td><td><input type="text" name="protectedCol3" size=2></td></tr>
        <tr><td>4</td><td><input type="text" name="protectedRow4" size=2></td><td><input type="text" name="protectedCol4" size=2></td></tr>
        <tr><td>5</td><td><input type="text" name="protectedRow5" size=2></td><td><input type="text" name="protectedCol5" size=2></td></tr>
        </table>
    </td></tr>
    </table>
</td></tr>

<tr>
<td>
    <table>
        <tr><td></td><td></td><td><font color="#00FF00">Fish</font></td><td></td><td><font color="#00FF00">Tourism</font></td><td></td><td></td></tr>
        <tr><td></td><td></td><td><input disabled type="text" name="fish" size=4></td>
        <td>+</td>
        <td><input disabled type="txt" name="tour" size=4></td>
        <td>=</td>
        <td><input disabled type="txt" name="gain" size=4></td></tr>

        <tr><td><font color="#FF0000">Coral</font></td><td></td><td><font color="#FF0000">Mangroves</font></td><td></td><td><font color="#FF0000">Seagrass</font></td><td></td><td></td></tr>
        <tr><td><input disabled type="text" name="coral" size=4></td>
        <td>+</td>
        <td><input disabled type="txt" name="groves" size=4></td>
        <td>+</td>
        <td><input disabled type="txt" name="grass" size=4></td>
        <td>=</td>
        <td><input disabled type="txt" name="loss" size=4></td></tr>

         <tr><td></td><td></td><td></td><td></td><td align=right><font color="#FF0000">CV</font></td><td></td><td><input disabled type="txt" name="cv" size=4></td></tr>

        <tr><td></td><td></td><td></td><td></td><td align=right><b>Net Score</b></td><td></td><td><input disabled type="txt" name="score" size=4></td></tr>

    </table>
</td></tr>
</table>
<input type="hidden" name="color" value="true">
<input type="button" value="Clear" onclick="javascript:clean();">
<input type="button" value="Example" onclick="javascript:example();">
<input type="button" value="Calculate" onclick="javascript:getinput();">
</form>

<div id="test-errors"></div>

</body>

</html>
